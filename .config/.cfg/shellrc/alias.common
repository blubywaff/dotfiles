#!/bin/bash

git() {
    base=( "/usr/bin/git" )
    noshift="false"
    is_verbose="false"
    until [ -z $1 ]; do
        if [[ "$1" == "--blub-v" ]]; then
            is_verbose="true"
            shift
            continue
        fi
        if [[ "$1" == "--blub-shift" ]]; then
            sn=$2
            shift 2
            for (( c=1; c <= $sn; c++ )); do
                base+=( "${!c}" )
            done
            shift $sn
            continue
        fi
        break
    done
    case $1 in
        "st")
            base+=( "status" )
            ;;
        "stu")
            base+=( "status" "-uno" )
            ;;
        "lg")
            base+=( "log" "--format=format:%C(green)%h %C(auto)%G? %C(auto)%<(12,trunc)%cn %C(blue)%>(14,trunc)%ar %C(reset)%s" )
            ;;
        "ci")
            base+=( "commit" "-S" "-m" )
            ;;
        "top")
            command cd "$(git rev-parse --show-toplevel)"
            return
            ;;
        *)
            noshift="true"
            ;;
    esac
    if [[ "$noshift" == "false" ]]; then
        shift
    fi
    # Create new full new command excluding shifted
    for i; do
        base+=( "$i" )
    done
    if [[ "$is_verbose" == "true" ]]; then
        echo "${base[@]}"
    fi
    command "${base[@]}"
}

config() {
    base=( "--blub-shift" "2" "--git-dir=$HOME/.config/.cfg/.git-dir" "--work-tree=$HOME" )
    if [[ "$@" == "reload" ]]; then
        for i in /home/alex/.config/.cfg/shellrc/*.common; do
            command source "$i"
        done
        return
    fi
    git "${base[@]}" "$@"
}

cd() {
    builtin cd "$@"
    command ls -A --color=auto
}

gpp() {
    g++ -std=c++23 -Wall -g -pedantic -Weffc++ -pthread "$@"
}

mpv() {
    command mpv --image-display-duration=inf --keep-open=always --loop-file=inf "$@"
}

argtest() {
    echo $@
    until [ -z "$1" ]; do
        echo $1
        shift
    done
}
